/*
	 _       ______  ____  __ __ ____  ____  _____   ________
	| |     / / __ \/ __ \/ //_// __ \/ __ \/  _/ | / /_  __/
	| | /| / / / / / /_/ / ,<  / /_/ / /_/ // //  |/ / / /
	| |/ |/ / /_/ / _, _/ /| |/ ____/ _, _// // /|  / / /
	|__/|__/\____/_/ |_/_/ |_/_/   /_/ |_/___/_/ |_/ /_/ v.11
*/

var film = {};
var WP = {};

WP.json = false;
//-------------------------------------------------
// WP (Work Print) Class
//-------------------------------------------------
/* WP.build
* Builds film object from jsonified
*
* @param	obj 	Object 	original sequence object as
					generated by FCP
*/
WP.build = function (obj) {
	'use strict';
	obj = WP.json.xmeml;
	if (obj != false && obj !== undefined) {
		if (obj['@version']=== "5" || obj['@version']=== "4") {
			console.log('XML2JSON:')
			console.dir(obj);
			var cuts = [],
				reels = [],
				track = obj.sequence.media.video.track
			if (WP.isArray(track)){
				for (var i = 0; i < track.length; i++) {
					if (track[i].clipitem !== undefined) {
						cuts = cuts.concat(track[i].clipitem);
					}
				}
				cuts.sort(this.sortTracks);
			} else {
				cuts = obj.sequence.media.video.track.clipitem;
			}
			film = new Film(obj.sequence.name);
			for (var i = 0; i < cuts.length; i++) {
				if ( $.inArray(cuts[i].name + '**' + cuts[i].duration, reels) === -1) {
					var r = new Reel(cuts[i].name, cuts[i].duration, cuts[i].rate.timebase);
					film.reels.push(r);
					reels.push(cuts[i].name + '**' + cuts[i].duration);
				}
				var c = new Cut(cuts[i].name, cuts[i].in, cuts[i].out, cuts[i].rate.timebase, cuts[i].start, cuts[i].end);
				film.cuts.push(c);
			}
			film.reels.sort(WP.sortReels);
			this.detectBlack();
			this.dataInput();
		}
		return false; //HMM why did I do this?
	}
};

/* WP.dataInput
* Generates forms for entering reel data, first
* checking local storage with jStorage. Creates
* bindings to UI elements that will apply data to the
* film Object
*
*/
WP.dataInput = function () {
	'use strict';

	$('#uploadFile').fadeOut('560');
	$('#keycodeEntry').delay('560').fadeIn('600');

	WP.getReels();
	var rowCount = 0;
	for (var i = 0; i < film.reels.length; i++) {
		var which = i % 2;
		if (which === 0) {
			rowCount++;
			var obj = {};
			obj.i = rowCount;
			$('#rowTmpl').tmpl(obj).appendTo('#keycodeEntry');
		}
		$('#keycodeInput').tmpl(film.reels[i]).appendTo('#keycodeEntry #row'+rowCount);
	}
	for (var i in film.reels) {
		if (film.reels[i].keycode.i !== null && film.reels[i].keycode.o !== null) {
			WP.updateCuts[film.reels[i]];
			WP.saveKeycode($('#inputID-' + film.reels[i].id).find('.keycodeSave').eq(0));
		} else if (film.reels[i].frames !== 0 && film.reels[i].frames !== null) {
			WP.updateCuts[film.reels[i]];
			WP.saveKeycode($('#inputID-' + film.reels[i].id).find('.keycodeSave').eq(0));
		}
	}

	$('.keycodeSave').live('click', function () {
		WP.saveKeycode($(this));
	});
	$('.keycodeInput input').live('change', function () {
		var v = $(this).val();
		if (v.length > 14) {
			$(this).addClass('filled');
		} else if ($(this).hasClass('i') && v === 0) {
			$(this).addClass('filled');
		} else if ($(this).hasClass('o') && WP.isFeet(v)) {
			$(this).addClass('filled');
		} else if ($(this).hasClass('o') && !WP.isAlpha(v[0]) && v.length > 0) {
			$(this).addClass('filled');
		}
		if ($(this).parent().parent().find('.i').hasClass('filled') && $(this).parent().parent().find('.o').hasClass('filled')) {
			$(this).parent().parent().find('.keycodeSave').removeClass('disabled');
		} else {
			$(this).parent().parent().find('.keycodeSave').addClass('disabled');
		}
	});
	$('.keycodeInput .btn-warning').live('click', function () {
		$(this).parent().find('input.i').val('');
		$(this).parent().find('input.o').val('');
		var $disp = $(this).parent();
		if ($disp.attr('data') !== undefined && $disp.attr('data') !== null && $disp.attr('data') !== '') {
			var reel = JSON.parse($.jStorage.get($disp.attr('data')));
			$disp.removeClass('savedKeycode');
			$disp.find('input.i').show();
			$disp.find('input.i').val('');
			$disp.find('.enteredText.i').text('')
			$disp.find('.enteredText.i').hide();
			$disp.find('input.o').show();
			$disp.find('.enteredText.o').text('');
			$disp.find('.enteredText.o').hide()
			$disp.find('.footageEst').text(reel.rough);
			$disp.find('.keycodeSave').removeClass('disabled');
			$.jStorage.deleteKey($disp.attr('data'));
			//WP.clearReel();
		}
	});
	return false;
};

/* WP.saveKeycode
* Collects reel data from object and then passes
* updated reel object to WP.updateCuts to apply
* changes across all effected cuts.
*
* @param	$elem 	jQuery 	Object generated to collect reel data
*/
WP.saveKeycode = function ($elem) {
	'use strict';
	var container = $elem.parent(),
		id = container.attr('id');
		var realId = id.split('inputID-');
	for (var i in film.reels) {
		if (film.reels[i].id === realId[1]) {
			var inRaw = container.find('.i').val(),
				outRaw = container.find('.o').val(),
				inVal = WP.normalDisplay(WP.normal(inRaw)),
				outVal = WP.normalDisplay(WP.normal(outRaw)),
				frames = 0;

			if (WP.isFeet(outRaw)) {
				frames = WP.fromFeet(outRaw);
			} else if (WP.isNumeric(outRaw)) {
				frames = Number(outRaw);
			}
			//CASE FOR FOOTAGE ONLY INPUT
			if (inVal !== undefined && inVal !== null) {
				film.reels[i].keycode.i = inVal;
				film.reels[i].keycode.o = outVal;
				var inSplit = inVal.split(' '),
					outSplit = outVal.split(' ');
				film.reels[i].frames = WP.fromKey(outSplit[2]) - WP.fromKey(inSplit[2]);
				film.reels[i].footage = WP.toFeet(film.reels[i].frames);
				film.reels[i].realtime = film.reels[i].frames * (1 / 24);
				film.reels[i] = WP.compare(film.reels[i]);
				WP.storeReel(film.reels[i]);
			} else if (frames !== 0) {
				film.reels[i].frames = frames;
				film.reels[i].footage = WP.toFeet(film.reels[i].frames);
				film.reels[i].realtime = film.reels[i].frames * (1 / 24);
				film.reels[i] = WP.compare(film.reels[i]);
				WP.storeReel(film.reels[i]);
			}else{
				$('#inputID-' + film.reels[i].id).attr('data', film.reels[i].digital + film.reels[i].name);
			}
			this.updateCuts(film.reels[i]);
			break;
		}
	}
};

/* WP.detectBlack
* Analyzes cuts for gaps between clips or intentional
* segments of black footage that will be required to cut
* in. Fills in new black-footage Objects into film.cuts Array.
*
*/
WP.detectBlack = function () {
	'use strict';
	var prev = {
		i : 0,
		o : 0
	},
	blackReel = {
		i : 0,
		o : 0
	},
	black = [];
	for (var i = 0; i < film.cuts.length; i++) {
		var start = film.cuts[i].location.start;
		if (prev.o !== start) {
			blackReel.o += start - prev.o;
			var b = new Cut('*BLACK*', blackReel.i, blackReel.o, 29.97, prev.o, start);
			black.push(b);
			blackReel.i += start - prev.o;
		}
		prev.i = film.cuts[i].location.start;
		prev.o = film.cuts[i].location.end;
	}
	for (var i in black) {
		film.cuts.push(black[i]);
	}
	film.cuts.sort(this.sortCuts);
};

/* WP.correctBlack
* Corrects cuts of black (clear leader) to match the rolls
* preceding and following the cut
*/
WP.correctBlack = function () {
	var totalBlack = 0,
		videoBlack = 0,
		rate = 29.97;
	for (var i = 0; i < film.cuts.length; i++) {
		if (film.cuts[i].reel === '*BLACK*') {
			if (i === 0) {
				film.cuts[i].C = film.cuts[i+1].C;
				film.cuts[i].framerate = film.cuts[i+1].framerate;
			} else {
				film.cuts[i].C = film.cuts[i - 1].C;
				film.cuts[i].framerate = film.cuts[i-1].framerate;
			}
			if (film.cuts[i].C === undefined) {
				var x = 0;
				while (film.cuts[i].C === undefined) {
					film.cuts[i].C = film.cuts[i + x].C;
					film.cuts[i].framerate = film.cuts[i + x].framerate;
					x += 1;
				}
			}
			film.cuts[i].frames = {};
			film.cuts[i].frames.i = 0;
			film.cuts[i].frames.o = this.correct(this.pulldown(film.cuts[i].location.end - film.cuts[i].location.start, film.cuts[i].framerate), film.cuts[i].C)
			film.cuts[i].digital.i = 0;
			film.cuts[i].digital.o = film.cuts[i].location.end - film.cuts[i].location.start;
			film.cuts[i].timecode.i = this.toTimecode(0,film.cuts[i].framerate);
			film.cuts[i].timecode.o = this.toTimecode(film.cuts[i].location.end - film.cuts[i].location.start, film.cuts[i].framerate);
			film.cuts[i].feet.i = WP.toFeet(0);
			film.cuts[i].feet.o = WP.toFeet(film.cuts[i].frames.o);
			totalBlack += film.cuts[i].frames.o;
			videoBlack += film.cuts[i].digital.o;
			rate = film.cuts[i].framerate;
		}
	}
	if (totalBlack !== 0) {
		var b = new Reel ('*BLACK*', videoBlack, rate);
		b.frames = totalBlack;
		b.footage = WP.toFeet(totalBlack);
		b.deviate = totalBlack - this.pulldown(videoBlack, rate);
		b.C = (totalBlack - this.pulldown(videoBlack, rate)) / totalBlack;
		film.reels.push(b);
	}
};

/* WP.storeReel
*
* @param: reel Object
* @returns: jStorage key "reels"
*/
WP.storeReel = function (reel) {
	'use strict';
	//console.dir(reel);
	$.jStorage.set(reel.digital + reel.name, JSON.stringify(reel));
	return false;
};

WP.clearReel = function (reel) {
	$.jStorage.deleteKey(reel.digital + reel.name, JSON.stringify(reel));
	return false;
}

/* WP.regReel
*
* Retrieves all reels from local storages and pushes them to the film.reels array
*/
WP.getReels = function () {
	'use strict';
	var storeIndex = $.jStorage.index();
	for (var i in storeIndex) {
		for (var x in film.reels) {
			if (storeIndex[i] == film.reels[x].digital + film.reels[x].name) {
				var r = JSON.parse($.jStorage.get(film.reels[x].digital + film.reels[x].name));
				film.reels[x] = r;
			}
		}
	}
};

/* WP.saveReelsToFile()
*
* @returns reels.json with all reels data stored in it for upload
*/
WP.saveReelsToFile = function () {
	$.ajax({
		'url': 'php/reels.php',
		'type': 'POST',
		'data': JSON.stringify(film.reels),
		'success': function (data){

		}
	});
};

/* WP.
* Traverses film.cuts Array and updates the ones that name match the reel
*
* @param	reel 	Object 	updated reel Object with keycode data
* @returns: modified film.cuts Array
*/
WP.updateCuts = function (reel) {
	'use strict';
	//change display
	var $disp = $('#inputID-' + reel.id);
	$disp.addClass('savedKeycode');
	$disp.find('input.i').hide();
	if (reel.keycode.i !== null) {
		$disp.find('.enteredText.i').text(reel.keycode.i);
	} else {
		$disp.find('.enteredText.i').text(reel.footage);
	}
	$disp.find('.enteredText.i').show();
	$disp.find('input.o').hide();
	if (reel.keycode.o !== null) {
		$disp.find('.enteredText.o').text(reel.keycode.o);
	} else {
		$disp.find('.enteredText.o').text(reel.frames + ' frames');
	}
	$disp.find('.enteredText.o').show();
	$disp.find('.footageEst').text(reel.footage);
	$disp.find('.keycodeSave').addClass('disabled');
	//change cuts
	for (var i in film.cuts) {
		if (film.cuts[i].reel === reel.name) {
			if (reel.keycode.i !== null && reel.keycode.i !== undefined) {
				var keyI = reel.keycode.i.split(" "),
				keyBase = keyI[0] + ' ' + keyI[1] + ' ',
				frameBase = this.fromKey(keyI[2]),
				digitalIn = 0,
				digitalOut = 0;

				digitalIn = this.correct(this.pulldown(film.cuts[i].digital.i, reel.framerate), reel.C);
				//NOTHING TO SEE HERE MOVE ALONG
				//WP.editLearn(film.cuts[i].digital.i, reel.framerate, reel.C, digitalIn);
				//DONE WITH THE DONT WORRY ABOUT IT THING

				digitalOut = this.correct(this.pulldown(film.cuts[i].digital.o, reel.framerate), reel.C);
				//NOTHING TO SEE HERE MOVE ALONG
				//WP.editLearn(film.cuts[i].digital.o, reel.framerate, reel.C, digitalOut);
				//DONE WITH THE DONT WORRY ABOUT IT THING
				film.cuts[i].frames = {
					"i" : digitalIn,
					"o" : digitalOut
				};
				film.cuts[i].keycode.i = keyBase + this.toKey(frameBase + digitalIn);
				film.cuts[i].keycode.o = keyBase + this.toKey(frameBase + digitalOut);
				film.cuts[i].deviate = Math.round(reel.C * (digitalOut - digitalIn));
				film.cuts[i].feet.i = WP.toFeet(digitalIn);
				film.cuts[i].feet.o = WP.toFeet(digitalOut);
				film.cuts[i].framerate = reel.framerate;
				film.cuts[i].C = reel.C;
			} else if (reel.frames !== null && reel.frames !== 0) {
				digitalIn = this.correct(this.pulldown(film.cuts[i].digital.i, reel.framerate), reel.C);
				digitalOut = this.correct(this.pulldown(film.cuts[i].digital.o, reel.framerate), reel.C);
				film.cuts[i].frames = {
					"i" : digitalIn,
					"o" : digitalOut
				};
				film.cuts[i].deviate = Math.round(reel.C * (digitalOut - digitalIn));
				film.cuts[i].feet.i = WP.toFeet(digitalIn);
				film.cuts[i].feet.o = WP.toFeet(digitalOut);
				film.cuts[i].framerate = reel.framerate;
				film.cuts[i].C = reel.C;
			}

		}
	}
	var allSaved = true;
	$('.keycodeInput').each(function () {
		if (!$(this).hasClass('savedKeycode')) {
			allSaved = false;
		};
	});
	if (allSaved) {
		this.displayCutlist();
	}
};

//teaches NN when calculations are off
/* WP.editLearn
* Not ready for primetime
*
* @param	d 		integer 	digital length of reel
* @param	f 		integer 	framerate of reel/transfer
* @param	C 		float 		Correction value generated for reel
* @param	newNew	integer 	frame location on film
*/
WP.editLearn = function (d, f, C, newNew) {
	/*
	film.deanLearner.train([{
		input: {
			digital: d,
			framerate: f,
			digitalPulldown: this.pulldown(d, f),
			C: C
		},
		output: {
			film: newNew
		}}]);
	*/
};

WP.genStats = function () {
	'use strict';
	var r = film.reels,
	c = film.cuts,
	f = {
		all : {
			frames : 0, //x
			digital : 0, //x
			deviate : 0, //x
			reels : 0, //x
			framerate : 29.97,
			C : 0, //GENERATE BASED ON NEW TOTAL DATA
 			avg : {
				digital : 0, //x
				frames : 0, //x
				C : 0 //x

			}
		},
		edit : {
			frames : 0, //
			digital : 0, //
			framerate : 0, //
			deviate : 0, //
			ratio : 0, //
			cuts : 0, //
			avg : { //per shot
				frames : 0, //
				digital : 0, //
				deviate : 0 //
			}
		},
		reels : []
	},
	r = [];
	//TODO add reel indexing
	for (var i in r) {
		if (r[i].name !== '*BLACK*') {
			f.all.frames += r[i].frames;
			f.all.digital += r[i].digital;
			f.all.avg.C += r[i].C;
			f.all.reels += 1;
		}
		f.reels[i] = {};
		f.reels[i].name = r[i].name;
	}
	f.all.deviate = reel.frames - this.pulldown(f.all.digital, f.all.framerate);
	f.all.C = f.all.deviate / f.all.frames;
	f.all.avg.digital = Math.round(f.all.digital / f.all.reels),
	f.all.avg.frames = Math.round(f.all.frames / f.all.reels),
	f.all.avg.C = f.all.avg.C / f.all.reels;

	for (var x in c) {
		//c[x].
		f.edit.digital += c[x].digital;
		f.edit.frames += c[x].frames;
		f.edit.deviate += c[x].deviate;
		f.edit.cuts += 1;
		//

	}
	f.edit.ratio = f.edit.frames / f.all.frames;
	//film.stats = stats;
};

/* WP.displayCutlist
* Renders cutlist table and reel list in body
*
*/
WP.displayCutlist = function () {
	'use strict';
	WP.correctBlack();
	$('#keycodeEntry').fadeOut(482);
	$('#cutlist table tbody').empty();
	film.cuts = WP.reIndex(film.cuts);
	film.reels.sort(WP.sortReels);
	console.log('FILM OBJECT:');
	console.dir(film);
	for(var i in film.cuts){
		film.cuts[i].keycode.i = WP.normalArray(film.cuts[i].keycode.i);
		film.cuts[i].keycode.o = WP.normalArray(film.cuts[i].keycode.o);
		if (film.cuts[i].keycode.i[2] === '') {
			if (film.cuts[i].feet.i !== null) {
				film.cuts[i].keycode.i[2] = film.cuts[i].feet.i;
			} else {
				film.cuts[i].keycode.i[2] = '~ ' + film.cuts[i].rough.i;
			}
		}
		if (film.cuts[i].keycode.o[2] === '') {
			if (film.cuts[i].feet.o !== null) {
				film.cuts[i].keycode.o[2] = film.cuts[i].feet.o;
			} else {
				film.cuts[i].keycode.o[2] = '~ ' + film.cuts[i].rough.o;
			}
		}
	}
	$('#cutDisplay').tmpl(film.cuts).appendTo('#cutlist table tbody');
	$('#cutlist').fadeIn(570);
	$('#reels table tbody').empty();
	$('#reelDisplay').tmpl(film.reels).appendTo('#reels table tbody');
	$('#reels').fadeIn(530);
	return false;
};

/**
 * Normalize keycode values to 'XXXX00000000+00'
 * format for optimal storage
 *
 * @param {string} j 	Unformatted keycode
 *
 * @return {string} 		Formatted keycode
 */
WP.normal = function (j) {
	'use strict';
	var e;
	if (j === null) {
		return null
	}
	if (j.length === 17) {
		return j.substring(0, 4) + j.substring(5, 9) + j.substring(10, 17);
	} else if (j.length === 16) {
		e = explode(" ", j);
		return e[0] + '' + e[1];
	} else if (j.length === 15) {
		return j;
	}
};

/**
 * Normalize input and splits keykode into
 * 3 values contained in an Array. Intended to be used
 * on compacted, stored keycode strings.
 *
 * @param	{string} key 	Formatted or unformatted keykode
 *
 * @return 	{array} 		Array of values ["XXXX","0000","0000+00"]
 */
WP.normalArray = function (key) {
	'use strict';
	if (key === null) {return ['','','']}
	key = this.normal(key);
	var rtnArr = [];
	rtnArr[0] = key.substring(0, 4);
	rtnArr[1] = key.substring(4, 8);
	rtnArr[2] = key.substring(8, 15);
	return rtnArr;
};

/**
 * Takes a normalized or unnormalized keykode value and
 * returns a readable value in this form 'XXXX 0000 0000+00'
 *
 * @param	val 	String/Array 	formatted/unformatted String (XXXX00000000+00) || Array[3]
 *
 * @returns	String 	keykode as 'XXXX 0000 0000+00'
 */
WP.normalDisplay = function (val) {
	'use strict';
	if (typeof val === 'object') {
		return val[0] + ' ' + val[1] + ' ' + val[2];
	} else if (typeof val === 'string') {
		if (val.length !== 15) {
			val = WP.normal(val);
		}
		return val.substring(0, 4) + ' ' + val.substring(4, 8) + ' ' + val.substring(8, 15);
	}
};

/* WP.compare
*
* @param: reel - object derived from xml
* @returns: object with corrections applied
*/
WP.compare = function (reel) {
	'use strict';
	reel.deviate = reel.frames - this.pulldown(reel.digital, reel.framerate);
	reel.C = reel.deviate / reel.frames;
	return reel;
};

/* WP.correct
*
* @param: frames - integer
* @param: C - float (correction value)
* @returns: integer
*/
WP.correct = function (frames, C) {
	'use strict';
	return Math.round(frames + (frames * C));
};

/* WP.pulldown
*
* @param: d - integer
* @param: framerate - float
* @returns: integer
*/
WP.pulldown = function (d, framerate) {
	'use strict';
	return Math.floor((d/framerate) * 24);
};

/* WP.toRough
* gives a general estimate of the length of the roll, probably good within 3-5 frames for 100' rolls
*
* @param: frames - integer
* @param: framerate - float
* @returns: formatted String (0+00')
*/
WP.toRough = function (frames, framerate) {
	'use strict';
	var n = Math.floor((frames/framerate) * 24);
	return WP.toFeet(n);
};

/* WP.toTimecode
* toTimecode all that is needed for now
*
* @param: frames - integer
* @param: rate - float
* @returns: formatted String (00:00;00)
*/
WP.toTimecode = function (frames, rate) {
	'use strict';
	var str = '';
	if (rate === 29.97) {
		rate = 30;
	}
	var first = Math.floor(frames/rate);
	if(first > 60) {
		var second = Math.floor(first/60);
		str += WP.zeroPad(second, 2) + ':' + WP.zeroPad(first % 60, 2);
	}else{
		str += '00:'+ WP.zeroPad(first, 2);
	}
	str += ';' + WP.zeroPad(frames % rate, 2);
	return str;
};

/**
 * All feet measurements must be marked with trailing '
 * can be unpadded with preceding 0
 *
 * @param {string} footage  Foortage formated string (0+00')
 *
 * @return {integer} frames
 */
WP.fromFeet = function (footage) {
	'use strict';
	var pieces = footage.split('+');
	var feet = parseInt(pieces[0], 10);
	var frames = parseInt(pieces[1].substring(0, 2), 10);
	
	return Math.round((feet * 40) + frames);
};

/**
 * Convert frame count to footage notation 0+00'
 *
 * @param {integer} frames Count of frames to be converted
 * @param {string} start  Formatted footage string representing start (optional)
 *
 * @return {string}  String formatted (0+00')
 */
WP.toFeet = function (frames, start) {
	'use strict';
	var feet;
	if (start !== null && start !== undefined && start !== "0+00'") {
		frames += WP.fromFeet(start);
	}
	feet = Math.floor(frames / 40);
	frames = frames % 40;
	return feet + '+' + WP.zeroPad(frames, 2) + "'";
};

/* WP.toKey
* to integer from 7 character format
*
* @param: frames - integer
* @param: start - formated String (0000+00)
* @returns: formated String (0000+00)
*/
WP.toKey = function (frames, start) {
	'use strict';
	if (start !== null && start !== undefined && start !== '0000+00') {
		frames += this.fromKey(start);
	}
	var first = Math.floor(frames / 20),
		second = frames % 20;
	return WP.zeroPad(first, 4) + '+' + WP.zeroPad(second, 2);
};

/* WP.fromKey
* Always represented in padded values
*
* @param: key - formatted String (0000+00)
* @returns: integer
*/

WP.fromKey = function (key) {
	'use strict';
	var first = parseInt(key.substring(0, 4), 10),
		second = parseInt(key.substring(5, 7), 10);
	return Math.round((first * 20) + second);
};

/* WP.reIndex
*
* @param 	arr 	Array 	object containing index attribute
* @returns	Array of objects with corrected index
*/
WP.reIndex = function (arr) {
	for (var i = 0; i < arr.length; i++) {
		arr[i].index  = i;
	}
	return arr;
};

/*
 * Adds leading zeros to fit numeber to string of arbitrary length
 *
 * @param 	{integer} num		Number for timecode or keycode formatting
 * @param 	{integer} places 	Length of resulting string to pad to
 * 
 * @return 	{string} (0001 for num=1, places=4)
 */
WP.zeroPad = function (num, places) {
	'use strict';
	var zero = places - num.toString().length + 1;
	return Array(+(zero > 0 && zero)).join('0') + num + '';
};

/**
 * To differentiate footage strings from keycode strings
 * (hopefully never needed)
 *
 * @param 	{string} 	str 	formatted String
 * @return  {boolean} 	Whether or not string representes footage
 */
WP.isFeet = function (str) {
	'use strict';
	if (str.charAt(str.length - 1) === "'") { 
		return true; 
	}
	return false;
};

/**
 * To validate whether string is a keycode
 *
 * @param {string}  str 	String to evaluate
 *
 * @return {boolean} Whether or not string is a keycode
 */
WP.isKey = function (str) {
	'use strict';
	if (str.length > 6) {
		var where = str.indexOf('+');
		if (where === str.length - 3) {
		   return true;
		}
		return false;
	}
};

/**
 * Determines if input is an Object or an Array
 *
 * @param 	{object|array} 	obj 	Object or Array
 *
 * @return	{boolean}	true if input is array
 */
WP.isArray = function (obj) {
	'use strict';
	return obj.constructor == Array;
};

/* WP.sortTracks
* Used to sort cuts from multi-track sequences with the
* start parameter.
*
* @param	a 	Object 	a cut
* @param	b 	Object 	a cut
* @returns integer sort value
*/
WP.sortTracks = function (a, b) {
	'use strict';
	if (parseInt(a.start) < parseInt(b.start)) {
		return -1;
	}
	if (parseInt(a.start) > parseInt(b.start)) {
		return 1;
	}
	return 0;
};

/* WP.sortCuts
* Used to sort cuts by location within the sequence
*
* @param	a 	Object 	a cut
* @param	b 	Object 	a cut
* @returns integer sort value
*/
WP.sortCuts = function (a, b) {
	'use strict';
	if (a['location']['start'] < b['location']['start']) {
		return -1;
	}
	if (a['location']['start'] > b['location']['start']) {
		return 1;
	}
	return 0;
};

WP.sortReels = function (a, b) {
	'use strict';
	if (a['name'] < b['name']) {
		return -1;
	}
	if (a['name'] > b['name']) {
		return 1;
	}
	return 0;
};

/**
 * Determines if a string is composed entirely of
 * alphabetic characters A-Z, upper or lowercase.
 *
 * @param {string} 	str 	String to evaluate
 *
 * @returns {boolean} Whether string passes test
 */
WP.isAlpha = function (str) {
	'use strict';
	if (typeof str === 'number') {
		str += ''
	}
    return str.match(/^([a-z\(\)]+)$/i) !== null;
};

/**
 * Determines if a string is composed entirely of
 * numeric characters.
 *
 * @param {string} 	n 	String to evaluate
 *
 * @returns {boolean} Whether string passes test
 */
WP.isNumeric = function (n) {
	'use strict';
	return !isNaN(parseFloat(n)) && isFinite(n);
};

function Film (fname) {
	this.type = "film";
	this.name = fname;
	this.id = uuid();
	this.reels = [];
	this.cuts = [];
}

function Reel (cname, cduration, ctimebase) {
	this.type = 'reel';
	this.id = uuid();
	this.name = cname;
	this.keycode = {'i': null,'o': null};
	this.frames = null;
	this.footage = null;
	this.framerate = parseFloat(ctimebase);
	if (this.framerate === 30) {
		this.framerate = 29.97;
	}
	this.rough = WP.toRough((parseInt(cduration) - 1), this.framerate);
	this.realtime = null;
	this.digital = parseInt(cduration) - 1; //SUBTRACTING 1 FROM FCP REPORTED LENGTH, so 0 = 0 not 0 = 1
	this.timecode = WP.toTimecode(parseInt(this.digital), this.framerate);
	this.deviate = 0;
	this.C = 0;
	this.filename = null;
}

function Cut (cname, cin, cout, ctimebase, cstart, cend) {
	this.type = 'cut';
	this.id = uuid();
	this.reel = cname;
	this.digital = {
		'i' : parseInt(cin),
		'o' : parseInt(cout) - 1
	};
	this.framerate = parseFloat(ctimebase);
	if (this.framerate === 30) {
		this.framerate = 29.97;
	}
	this.frames = {'i': null,'o': null};
	this.feet = {'i' : null, 'o' : null};
	this.keycode = {'i' : null, 'o' : null};
	//this.realtime = {'i' : null, 'o' : null};
	this.timecode = {
		'i' : WP.toTimecode(this.digital.i, this.framerate),
		'o' : WP.toTimecode(this.digital.o, this.framerate)
	};
	this.rough = {
		'i' : WP.toRough(this.digital.i, this.framerate),
		'o' : WP.toRough(this.digital.o, this.framerate)
	};
	this.deviate = 0;
	this.location = {
		'start' : parseInt(cstart),
		'end' : parseInt(cend)
	};
	this.C = 0;
}

function Stats () {

}

WP.xml2json = function (input) {
	if (input.files && input.files[0]) {//Check if input has files.
		var reader = new FileReader(); //Initialize FileReader.
		reader.onloadend = function (e) {
			//console.log(e.target.result);
			e.target.result = WP.removeLines(e.target.result);
			var str = e.target.result;
			var dom = parseXml(str);
    		var json = xml2json(dom);
    		json = json.replace('undefined"xmeml', '"xmeml');
			WP.json = JSON.parse(json);
		};
		reader.readAsText(input.files[0]);
	}
};

WP.removeLines = function (str) {
	var lines = str.split(/\r?\n/);
	var output = '';
	for (var i = 2; i < lines.length; i++) {
		output += lines[i];
	}
	return output;
};

WP.api = {};

//Calculator for mobile
var WPcalc = {};

/* WPcalc._ui
*
*/
WPcalc._ui = function () {
	'use strict';
	$('#WPcalc input').bind('change', function () {
		var id = $(this).attr('id'),
			val = $(this).val(),
			out = '';
		if (id === '') {

		} else if (id === '0') {

		}
		$('input#output').val(out);
	});
};

/* WPcalc.firstCase
*
*/
WPcalc.firstCase = function (val) {
	'use strict';

};

/* WPcalc.secondCase
*
*/
WPcalc.secondCase = function (val) {
	'use strict';

};

/*
OBJECT STRUCTURE
var reel = {
	"type" : "reel",
	"id" : uuid,
	"name" : "",
	"keycode" : {
		"i" : "EM70 0218 7804+16",
		"o" : "EM70 0218 7806+00"
		},
	"frames" : 4000, //real film frames
	"footage" : "0000+00'",
	"rough" : 0+00', //generate
	"realtime" : 0000000000, //in milliseconds for @24fps
	"digital" : 5000,
	"timecode" : "00:00;00" //@framerate NON-ESSENTIAL
	"deviate" : -2,
	"C" : 0.0000, //float value almost always, correction value for digital cuts
	"filename" : "",
	"framerate" : 29.97
}

//cuts to be stored in an array within a film object
var cut = {
	"type" : "cut",
	"id" : uuid,
	"reelObj" : {}, //Full object or...
	"reel" : 'reference uuid',
	digital : { //video frames
		"i" : 0,
		"o" : 3400
		},
	frames : {
		"i" : 0,
		"o" 2300
		},
	feet : {
		"i" : "0+00'",
		"o" : "20+00'"
		},
	keycode : {
		"i" : "XXXX 0000 0000+00",
		"o" : "XXXX 0000 0000+00"
	},
	realtime : { //very very non-essential, maybe not supported
		"i" : 0000000, //millis
		"o" : 0011011 //@24fps
	},
	timecode : { //represented at framerate grabbed from the object
		"i" : "00:00:00",
		"o" : "00:00:00"
	}
	rough : {
		"i" :
	}
	"deviate" : 0, //frames of deviation d/a occuring within the cut, determined by length
	location : { //location in sequence, digital value, to be converted, valuable for determining black space... hmmm
		"start" : 0,
		"end" : 100
	}
}

var film = {
	"type" : "film",
	"id" : uuid,
	"cuts" : [],
	"reels" : [],
	"name" : "title"
}
*/


/*
Copyleft 2012 M. McWilliams matt@sixteenmillimeter.com

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

//THE FOLLOWING IS PACKAGED DEPENDENTS, NOT UNDER THE SCOPE OF WORKPRINT.JS:

//php.js explode and log10
function log10 (arg) {return Math.log(arg) / 2.302585092994046;}
function explode(delimiter,string,limit){var emptyArray={"0":""};if(arguments.length<2||typeof arguments[0]=="undefined"||typeof arguments[1]=="undefined")return null;if(delimiter===""||delimiter===false||delimiter===null)return false;if(typeof delimiter=="function"||typeof delimiter=="object"||typeof string=="function"||typeof string=="object")return emptyArray;if(delimiter===true)delimiter="1";if(!limit)return string.toString().split(delimiter.toString());var splitted=string.toString().split(delimiter.toString());
var partA=splitted.splice(0,limit-1);var partB=splitted.join(delimiter.toString());partA.push(partB);return partA};

//uuid generator
var uuid = function () {var S4=function(){return((1+Math.random())*65536|0).toString(16).substring(1)};return S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()};